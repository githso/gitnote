Git Bash 打开后，需要手动跳转到工作目录

版本控制系统只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等。

版本控制系统不能追踪二进制文件(图片、视频)的变化

版本控制系统是没法跟踪Microsoft Word文件（二进制格式）的改动

如果要真正使用版本控制系统，就要以纯文本方式编写文件

文本是有编码的，建议使用标准的UTF-8编码。

千万不要使用Windows自带的记事本编辑任何文本文件。

文件放到GIT仓库下，再：
1 git add 文件名
2 git commit -m 注释
eg：add 可以分多次，commit再一次性全部提交

Git命令必须在Git仓库目录内执行（git init除外），在仓库目录外执行是没有意义的。

未提交文件时，运行git status 时刻查看仓库当前状态，只能看到哪些文件被更改
如果要查看具体更改内容，运行git diff

git log 查看历史记录
简化输出：git log --pretty=oneline

commit id（版本号）太长的原因是防止冲突

回退版本：git reset --hard HEAD^

Git必须知道当前版本是哪个版本，在Git中，
用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，
往上100个版本写成HEAD~100。

如果错误回退，只要在还没有被关掉的命令行窗口往上找，
找到并指定回到未来的某个版本commit id
$ git reset --hard 1094a
版本号在不冲突的情况下没必要写全，前几位就可以了，Git会自动去找

如果命令行窗口关掉了还想重新恢复，Git提供了一个命令git reflog用来记录你的每一次命令

HEAD指向的版本就是当前版本，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

工作区有一个隐藏目录.git，是Git的版本库

git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

git reset HEAD <file>
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

工作区-暂存库-版本库

$ git checkout -- test.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

用户主目录下（cd ~，然后pwd查看路径）的.ssh文件，里面有id_rsa和id_rsa.pub两个文件，这是SSH Key的秘钥对，id_rsa是私钥（私人），id_rsa.pub是公钥（可公开）

$ git remote add origin https://github.com/githso/gitnote.git关联远程库
$ git push -u origin master第一次推送：把本地版本库master推送到远程仓库origin

由于远程库是空的，第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
以后就可以用$ git push origin master推送内容

创建SSH Key。打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com",一路回车，无需设置密码
