Git Bash 打开后，需要手动跳转到工作目录

版本控制系统只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等。

版本控制系统不能追踪二进制文件(图片、视频)的变化

版本控制系统是没法跟踪Microsoft Word文件（二进制格式）的改动

如果要真正使用版本控制系统，就要以纯文本方式编写文件

文本是有编码的，建议使用标准的UTF-8编码。

千万不要使用Windows自带的记事本编辑任何文本文件。

文件放到GIT仓库下，再：
1 git add 文件名
2 git commit -m 注释
eg：add 可以分多次，commit再一次性全部提交

Git命令必须在Git仓库目录内执行（git init除外），在仓库目录外执行是没有意义的。

未提交文件时，运行git status 时刻查看仓库当前状态，只能看到哪些文件被更改
如果要查看具体更改内容，运行git diff

git log 查看历史记录
简化输出：git log --pretty=oneline

commit id（版本号）太长的原因是防止冲突

回退版本：git reset --hard HEAD^

Git必须知道当前版本是哪个版本，在Git中，
用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，
往上100个版本写成HEAD~100。

如果错误回退，只要在还没有被关掉的命令行窗口往上找，
找到并指定回到未来的某个版本commit id
$ git reset --hard 1094a
版本号在不冲突的情况下没必要写全，前几位就可以了，Git会自动去找

如果命令行窗口关掉了还想重新恢复，Git提供了一个命令git reflog用来记录你的每一次命令

HEAD指向的版本就是当前版本，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

工作区有一个隐藏目录.git，是Git的版本库

git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

git reset HEAD <file>
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

工作区-暂存库-版本库

$ git checkout -- test.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

用户主目录下（cd ~，然后pwd查看路径）的.ssh文件，里面有id_rsa和id_rsa.pub两个文件，这是SSH Key的秘钥对，id_rsa是私钥（私人），id_rsa.pub是公钥（可公开）

$ git remote add origin https://github.com/githso/gitnote.git关联远程库，https需要密码
$ git remote add origin git@github.com:githso/gitnote.git不需要密码
$ git push -u origin master第一次推送：把本地版本库master推送到远程仓库origin

由于远程库是空的，第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
以后就可以用$ git push origin master推送内容

创建SSH Key。打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com",一路回车，无需设置密码

git clone git@github.com:githso/gitskills.git清除自身文件，克隆一个远程仓库

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但ssh协议速度最快。

$ git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev创建
$ git checkout dev切换
然后，用git branch命令查看当前分支：
$ git branch
* dev当前分支前面会标一个*号。
  master

在dev分支上做的修改提交，不会影响到master分支

在master分支下，把dev分支的工作成果合并到master分支上：
$ git merge dev用于合并指定分支到当前分支

切换分支使用git checkout <branch>
撤销修改则是git checkout -- <file>
$git switch命令也可以切换分支
创建并切换到新的dev分支，可以使用：
$ git switch -c dev
直接切换到已有的master分支，可以使用：
$ git switch master

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>或者git switch <name>

创建+切换分支：git checkout -b <name>或者git switch -c <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

用git log --graph命令可以看到分支合并图。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
而fast forward合并就看不出来曾经做过合并。

准备合并dev分支，请注意--no-ff参数，表示禁用Fast forwar,
如果禁用，merge会自动创建新的commit，所以加上-m参数，把commit描述写进去
$ git merge --no-ff -m "merge with no-ff" dev
合并后，我们用git log看看分支历史：
$ git log --graph --pretty=oneline --abbrev-commit

Git提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
$ git stash
刚才的存到哪去了？用git stash list命令查看保存的工作现场
$ git stash list
恢复方法
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了

若多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
$ git stash apply stash@{0}

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，
把bug提交的修改“复制”到当前分支，避免重复劳动。

开发一个新feature，最好新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

要查看远程库的信息，用git remote，用git remote -v显示更详细的信息：

伙伴的最新提交和你试图推送的提交有冲突导致失败
先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
$ git pull
git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
$ git branch --set-upstream-to=origin/dev dev
再$ git pull

多人协作的工作模式通常是这样：
1首先，可以试图用git push origin <branch-name>推送自己的修改；
2如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
3如果合并有冲突，则解决冲突，并在本地提交；
4没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比

创建标签
首先，切换到需要打标签的分支上：
$ git branch
$ git checkout master
然后命令git tag <name>就可以打一个新标签：
$ git tag v1.0
可以用命令git tag查看所有标签

给历史commit打标签,先找到commit id
$ git log --pretty=oneline --abbrev-commit
打上标签$ git tag <tagname> <commit id>
$ git tag v0.9 f52c633

git show <tagname>查看标签信息

还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字
$ git tag -a v0.1 -m "version 0.1 released" 1094adb

命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
命令git tag可以查看所有标签。

标签删除

如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
然后，从远程删除。删除命令也是push。

命令git push origin <tagname>可以推送一个本地标签到远程；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

忽略特殊文件
在Git工作区的根目录下创建一个特殊的.gitignore文件，
然后把要忽略的文件名填进去，
最后把.gitignore提交到Git，Git就会自动忽略这些文件。


$ git add -f App.class 被忽略后，可用-f强制添加到Git：
或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
$ git check-ignore -v App.class

配置别名
告诉Git，以后st就表示status：
$ git config --global alias.st status
--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。
如果不加，那只针对当前的仓库起作用。

我们知道，命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。
既然是一个unstage操作，就可以配置一个unstage别名：
$ git config --global alias.unstage 'reset HEAD'

配置一个git last，让其显示最后一次提交信息：
$ git config --global alias.last 'log -1'

git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

每个仓库的Git配置文件都放在.git/config文件中：
而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中